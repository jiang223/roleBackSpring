<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    <import resource="spring-redis.xml"></import>
    <context:property-placeholder location="classpath:com/resource/jdbc.properties" />
    <!--指明 controller 所在包，并扫描其中的注解-->
    <context:component-scan base-package="com.controller,com.service"/>
    <bean id="springContextHolder"  class="com.util.SpringContextHolder" />
    <!-- 静态资源(js、image等)的访问 -->
    <mvc:default-servlet-handler/>

    <!-- 开启注解 -->
    <mvc:annotation-driven/>

    <!-- API 接口跨域配置 -->
    <mvc:cors>
        <mvc:mapping path="*"
                     allowed-origins="*"
                     allowed-methods="GET, PUT"
                     allowed-headers="header1, header2, header3"
                     exposed-headers="header1, header2" allow-credentials="false"
                     max-age="123" />

    </mvc:cors>

    <aop:aspectj-autoproxy />
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- <property name="defaultErrorView" value="rediret:/error"></property>   -->
        <property name="exceptionMappings">
            <props>
                <!--<prop key="com.jykj.demo.exception.AuthorizationException">redirect:/login</prop>-->
                <prop key="com.util.MyException">forward:/accessDenied</prop>
            </props>
        </property>
    </bean>
    <!--ViewResolver 视图解析器-->
    <!--用于支持Servlet、JSP视图解析-->
<!--    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=""/>
    </bean>-->

    <!-- 引入配置文件 -->
    <!--<bean id="propertyConfigurer"-->
          <!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="location" value="classpath:jdbc.properties" />-->
    <!--</bean>-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="url" value="${mysql.url}" />
      <!--  <property name="url" value="jdbc:mysql://localhost:3306/role" />-->
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
        <property name="initialSize" value="${mysql.initialSize}"></property>
        <property name="maxActive" value="${mysql.maxActive}"></property>
        <property name="maxIdle" value="${mysql.maxIdle}"></property>
        <property name="minIdle" value="${mysql.minIdle}"></property>
        <!-- 设置在自动回收超时连接的时候打印连接的超时错误  -->
        <!-- 超时等待时间以毫秒为单位  -->
        <property name="maxWait" value="${mysql.maxWait}"/>

    </bean>
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
   <!--<bean class="com.util.SpringContextHolder" lazy-init="false" />-->
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/mapper/*.xml"></property>
        <property name="configLocation" value="classpath:com/resource/mybatis-config.xml"/>
        <!-- 注意其他配置 -->
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 支持上传文件 -->
   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
    <!-- 开启事务管理注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>